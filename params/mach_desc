# Machine description file.
#
# This file is split into several sections [cluster_name].
# The sections are independent.
#
# Each section is read in order.
# Leading white space is not significant.
# Lines starting with ``something='' affect the variable ``something''.
# Lines starting with a word without ``='' denote a machine name.
# A machine name may be followed by variable assignments which are specific to
# the machine.
#
# Some info on accepted variables:
# ================================
#
# tmpdir and bindir are mandatory:
#     tmpdir = directory containing the relations during the calculation
#              on a machine.
#     bindir = directory containing the binary files on a machine.
# cores is the number of cores used on a machine for the sieve defaults to 1.
#     For example: if cores=5 and $param{'sieve_max_threads'}=2 then 3 jobs
#     will be run on the machine (2+2+1).
# poly_cores (optional) defaults to cores.
# mpi=1 (optional) after machine name for use MPI in linear algebra on this
#     machine, default mpi=0. If mpi=0 for all machines, then the linear
#     algebra will be run on localhost
#     For use MPI, CADO-NFS must be compiled with a MPI library, check that
#     the path of the MPI library is in the file local.sh (for example:
#     MPI=/usr/lib64/openmpi).
#
#
# Changing the list during a computation:
# =======================================
#
# If during a computation you want to add a machine, you just have to add
# appropriate line. Next time cadofactor.pl will check if there are finished
# jobs, it will also start new ones on the new machine. You can also increase
# the number of cores of an already listed machine. 
#
# If you need to stop the jobs on a machine, you can put cores=0 after its
# name. Once the current job is finished on the machine, no new job will be
# started again. Do not remove the machine name of the list, otherwise
# cadofactor.pl won't know where to look for tmp data to import result.
# If you can not wait for the job to be finished, feel free to kill it after
# having put cores=0 in this file: cadofactor.pl will eventually detect that
# the job is dead and import the partial result file.
#
# When you decrease the value of cores, this will have a similar effect: the
# script will let the job finish but won't start new ones until the number of 
# jobs becomes less than the value of cores.
#
# If you need to change the tmpdir during a computation, this is more tricky, 
# since cadofactor.pl assumes that all the jobs on a machine run with the same
# tmpdir. Therefore, you have do it like so:
#  - put cores=0 for the target machine
#  - wait until all running jobs of the machine are finished
#  - change tmpdir for this machine
#  - put the previous value of cores.
#


# Example:
# ========

[caramel]
# WARNING: $HOME is substitued locally!
tmpdir=/localdisk/tmp
bindir=$HOME/cado/trunk/dist/src

cores=12
poly_cores=9

pasta cores=2 poly_cores=1
tiramisu cores=4 poly_cores=3
patate cores=8 poly_cores=6
chorizo mpi=1
andouille mpi=1
merguez mpi=1
chipolata mpi=1


[cacao]
tmpdir=/local/tmp
bindir=/users/crypto/toto/cado-nfs

cores=2
    priam
    achille
cores=4
    meringue
    quiche


# vim: set tw=0:
